generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Notebook      Notebook[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Notebook {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  ranking   Int
  createAt  DateTime @default(now())
  upadtedAt DateTime @updatedAt
  songs     Songs?   @relation(fields: [songsId], references: [id])
  songsId   String?
}

model Songs {
  id         String     @id @default(cuid())
  title      String
  Artist     String
  sampleAddr String?
  coverImage String?
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
  Notebook   Notebook[]
  Playlist   Playlist[]
}

model Editions {
  id          String     @id @default(cuid())
  editionId   String
  editionDate DateTime   @default(now())
  createAt    DateTime   @default(now())
  upadtedAt   DateTime   @updatedAt
  playlist    Playlist[]
}

model Playlist {
  id            String   @id @default(cuid())
  editionId     String
  edition       Editions @relation(fields: [editionId], references: [id])
  songsId       String
  songs         Songs    @relation(fields: [songsId], references: [id])
  updateAt      DateTime @updatedAt
  createdAt     DateTime @default(now())
  playlistOrder Int
}